#pragma once
#include "FamilyTreeModel.h"
#include "entities.h"
#include "render-preprocessor.h"
#include "descendants-node-placer.h"
#include <unordered_map>
#include <vector>

using namespace mftb;

/*
*  Cluster, generated by some couple, consists of all direct descendants 
*  and ancestors of this couple (primary people) and the partners of this
*  people with NO PARENTS SPECIFIED (secondary people).
*
*  If primary person's partner has parents specified, this partner with their 
*  parents generates a new cluster.
*/


enum class RenderMode{
  Extended,
  Compact
};



class FamilyTreeCluster {
public:
  using node = DescendantsNodePlacer::node;
  
  struct PersonPlacement {
    bool is_secondary_to_this_cluster:1 = false;
    bool is_anccestor:1 = false;
    bool is_descendant:1 = false;

    bool processed = false;
    double x = 0;
    double y = 0;
    int couple_counter = 0;
  };
  struct CouplePlacement{
    int family_line_y_bias = 1;
    std::optional<double> family_line_connection_point_x;
    bool processed = false;
  };
  struct ClusterCandidate{
    bool only_second_partner;
    int generation;
    id_t couple_id;
  };

struct ClusterPlacement 
{
	std::unordered_map<id_t, PersonPlacement> persons_placement;
	std::unordered_map<id_t, CouplePlacement> couple_placement;
};



public:
  static FamilyTreeCluster fromCouple(FamilyTreeModel *db, const RenderPreprocessor::data &data, id_t id);

  static FamilyTreeCluster fromSecondPartner(FamilyTreeModel* db, const RenderPreprocessor::data& data, id_t);

  ClusterPlacement getPlacementData();

  std::vector<ClusterCandidate> getClusterCandidates();



private:
  const RenderPreprocessor::data &preprocessor_data;
  std::unordered_map<id_t, PersonPlacement> persons_placement;
  std::unordered_map<id_t, CouplePlacement> couple_placement;
  std::vector<ClusterCandidate> cluster_candidates;

  double leftmost_x = 0, rightmost_x = 0;

  // TODO : think about this kostyl`
  std::pair<int, int> last_placement_borders;
  id_t last_processed_couple = 0;

  mftb::FamilyTreeModel *const db;

  RenderMode render_mode;
  
private:

  FamilyTreeCluster(mftb::FamilyTreeModel *db_,
                    const RenderPreprocessor::data &data);
  void place_couple_descendants(id_t, double left_border);
  void place_persons_ancestors(id_t id, double left_border, id_t ignored_partner);

   std::vector<node> getLowerNodes(node couple_id);
   std::vector<id_t> processPartnersWithNoParents(id_t);

   double place_person(id_t person, double pos);
   void place_couple(id_t couple, std::optional<double> connector_pos, int bias);

};
